// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CarDriveEvent, CarDriveEventT } from '../drive/car-drive-event.js';
import { CarScanEvent, CarScanEventT } from '../drive/car-scan-event.js';
import { Events, unionToEvents, unionListToEvents } from '../drive/events.js';
import { LayoutEvent, LayoutEventT } from '../drive/layout-event.js';


export class Message implements flatbuffers.IUnpackableObject<MessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Message {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventType():Events {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Events.NONE;
}

event<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startMessage(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addEventType(builder:flatbuffers.Builder, eventType:Events) {
  builder.addFieldInt8(0, eventType, Events.NONE);
}

static addEvent(builder:flatbuffers.Builder, eventOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, eventOffset, 0);
}

static endMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMessage(builder:flatbuffers.Builder, eventType:Events, eventOffset:flatbuffers.Offset):flatbuffers.Offset {
  Message.startMessage(builder);
  Message.addEventType(builder, eventType);
  Message.addEvent(builder, eventOffset);
  return Message.endMessage(builder);
}

unpack(): MessageT {
  return new MessageT(
    this.eventType(),
    (() => {
      const temp = unionToEvents(this.eventType(), this.event.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: MessageT): void {
  _o.eventType = this.eventType();
  _o.event = (() => {
      const temp = unionToEvents(this.eventType(), this.event.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class MessageT implements flatbuffers.IGeneratedObject {
constructor(
  public eventType: Events = Events.NONE,
  public event: CarDriveEventT|CarScanEventT|LayoutEventT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const event = builder.createObjectOffset(this.event);

  return Message.createMessage(builder,
    this.eventType,
    event
  );
}
}
