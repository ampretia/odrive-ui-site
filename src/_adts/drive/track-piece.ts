// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TrackTurn } from '../drive/track-turn.js';
import { TrackType } from '../drive/track-type.js';


export class TrackPiece implements flatbuffers.IUnpackableObject<TrackPieceT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrackPiece {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

lid():number {
  return this.bb!.readUint32(this.bb_pos);
}

type():TrackType {
  return this.bb!.readUint8(this.bb_pos + 4);
}

turn():TrackTurn {
  return this.bb!.readUint8(this.bb_pos + 5);
}

static sizeOf():number {
  return 8;
}

static createTrackPiece(builder:flatbuffers.Builder, lid: number, type: TrackType, turn: TrackTurn):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.pad(2);
  builder.writeInt8(turn);
  builder.writeInt8(type);
  builder.writeInt32(lid);
  return builder.offset();
}


unpack(): TrackPieceT {
  return new TrackPieceT(
    this.lid(),
    this.type(),
    this.turn()
  );
}


unpackTo(_o: TrackPieceT): void {
  _o.lid = this.lid();
  _o.type = this.type();
  _o.turn = this.turn();
}
}

export class TrackPieceT implements flatbuffers.IGeneratedObject {
constructor(
  public lid: number = 0,
  public type: TrackType = TrackType.undefined,
  public turn: TrackTurn = TrackTurn.undefined
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TrackPiece.createTrackPiece(builder,
    this.lid,
    this.type,
    this.turn
  );
}
}
